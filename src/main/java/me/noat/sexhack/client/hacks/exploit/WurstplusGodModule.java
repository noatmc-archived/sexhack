package me.noat.sexhack.client.hacks.exploit;


import me.noat.sexhack.client.event.events.WurstplusEventPacket;
import me.noat.sexhack.client.guiscreen.settings.Setting;
import me.noat.sexhack.client.hacks.Module;
import me.noat.sexhack.client.hacks.WurstplusCategory;
import me.noat.sexhack.client.util.WurstplusCrystalUtil;
import me.noat.sexhack.client.util.WurstplusMathUtil;
import me.zero.alpine.fork.listener.EventHandler;
import me.zero.alpine.fork.listener.Listener;
import net.minecraft.entity.Entity;
import net.minecraft.entity.item.EntityEnderCrystal;
import net.minecraft.entity.player.EntityPlayer;
import net.minecraft.init.Items;
import net.minecraft.item.ItemBow;
import net.minecraft.item.ItemEndCrystal;
import net.minecraft.item.ItemExpBottle;
import net.minecraft.item.ItemStack;
import net.minecraft.network.play.client.CPacketAnimation;
import net.minecraft.network.play.client.CPacketPlayer;
import net.minecraft.network.play.client.CPacketPlayerTryUseItemOnBlock;
import net.minecraft.network.play.client.CPacketUseEntity;
import net.minecraft.network.play.server.SPacketSpawnObject;
import net.minecraft.util.EnumHand;
import net.minecraft.util.math.BlockPos;
import net.minecraft.util.math.Vec3d;

import java.util.concurrent.TimeUnit;

public class WurstplusGodModule extends Module {

    Setting rotations = create("Spoofs", "GMSpoofs", 1, 1, 20);
    Setting rotate = create("Rotate", "GMRotate", false);
    Setting antiIllegal = create("Anti Illegal", "GMAntiIllegal", false);
    Setting checkPos = create("Check Position", "GMCheckPos", false);
    Setting oneDot15 = create("1.13+", "GMOneDotThirteen", false);
    Setting entitycheck = create("Entity Check", "GMEntityCheck", false);
    Setting attacks = create("Attacks", "GMAttacks", 1, 1, 10);
    Setting offset = create("Offset", "GMOffset", 1, 1, 10);
    Setting delay = create("Delay", "GMDelay", 1, 1, 500);
    private float yaw = 0.0f;
    private float pitch = 0.0f;
    private boolean rotating;
    private int rotationPacketsSpoofed;
    private int highestID = -100000;
    @EventHandler
    private final Listener<WurstplusEventPacket.SendPacket> send_listener = new Listener<>(event -> {
        CPacketPlayerTryUseItemOnBlock packet;
        if (event.getStage() == 0 && event.get_packet() instanceof CPacketPlayerTryUseItemOnBlock) {
            packet = (CPacketPlayerTryUseItemOnBlock) event.get_packet();
            if (WurstplusGodModule.mc.player.getHeldItem(packet.hand).getItem() instanceof ItemEndCrystal) {
                if (this.checkPos.get_value(true) && !WurstplusCrystalUtil.canPlaceCrystal(packet.position, this.entitycheck.get_value(true), this.oneDot15.get_value(true)) || this.checkPlayers()) {
                    return;
                }
                this.updateEntityID();
                for (int i = 1 - this.offset.get_value(1); i <= this.attacks.get_value(1); ++i) {
                    this.attackID(packet.position, this.highestID + i);
                }
            }
        }
        if (event.getStage() == 0 && this.rotating && this.rotate.get_value(true) && event.get_packet() instanceof CPacketPlayer) {
            CPacketPlayer packet2 = (CPacketPlayer) event.get_packet();
            packet2.yaw = this.yaw;
            packet2.pitch = this.pitch;
            ++this.rotationPacketsSpoofed;
            if (this.rotationPacketsSpoofed >= this.rotations.get_value(1)) {
                this.rotating = false;
                this.rotationPacketsSpoofed = 0;
            }
        }
    });
    @EventHandler
    private final Listener<WurstplusEventPacket.ReceivePacket> recieve_listener = new Listener<>(event -> {
        SPacketSpawnObject packet = (SPacketSpawnObject) event.get_packet();
        if (event.get_packet() instanceof SPacketSpawnObject && packet.getType() == 51) {
            this.checkID(((SPacketSpawnObject) event.get_packet()).getEntityID());
        }
    });

    public WurstplusGodModule() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);

        this.name = "God Module";
        this.tag = "GodModule";
        this.description = "mojang spaghetti code abuser";
    }

    @Override
    public void enable() {
        this.resetFields();
        if (WurstplusGodModule.mc.world != null) {
            this.updateEntityID();
        }
    }

    @Override
    public void disable() {
        this.resetFields();
    }

    private void attackID(BlockPos pos, int id) {
        Entity entity = WurstplusGodModule.mc.world.getEntityByID(id);
        if (entity == null || entity instanceof EntityEnderCrystal) {
            AttackThread attackThread = new AttackThread(id, pos, this.delay.get_value(1), this);
            if (this.delay.get_value(1) == 0) {
                attackThread.run();
            } else {
                attackThread.start();
            }
        }
    }

    private void checkID(int id) {
        if (id > this.highestID) {
            this.highestID = id;
        }
    }

    public void updateEntityID() {
        for (Entity entity : WurstplusGodModule.mc.world.loadedEntityList) {
            if (entity.getEntityId() <= this.highestID) continue;
            this.highestID = entity.getEntityId();
        }
    }

    private boolean checkPlayers() {
        if (this.antiIllegal.get_value(true)) {
            for (EntityPlayer player : WurstplusGodModule.mc.world.playerEntities) {
                if (!this.checkItem(player.getHeldItemMainhand()) && !this.checkItem(player.getHeldItemOffhand()))
                    continue;
                return true;
            }
        }
        return false;
    }

    private boolean checkItem(ItemStack stack) {
        return stack.getItem() instanceof ItemBow || stack.getItem() instanceof ItemExpBottle || stack.getItem() == Items.STRING;
    }

    public void rotateTo(BlockPos pos) {
        float[] angle = WurstplusMathUtil.calcAngle(WurstplusGodModule.mc.player.getPositionEyes(mc.getRenderPartialTicks()), new Vec3d(pos));
        this.yaw = angle[0];
        this.pitch = angle[1];
        this.rotating = true;
    }

    private void resetFields() {
        this.rotating = false;
        this.highestID = -1000000;
    }

    public static class AttackThread
            extends Thread {
        private final BlockPos pos;
        private final int id;
        private final int delay;
        private final WurstplusGodModule WurstplusGodModule;

        public AttackThread(int idIn, BlockPos posIn, int delayIn, WurstplusGodModule WurstplusGodModuleIn) {
            this.id = idIn;
            this.pos = posIn;
            this.delay = delayIn;
            this.WurstplusGodModule = WurstplusGodModuleIn;
        }

        @Override
        public void run() {
            try {
                if (this.delay != 0) {
                    TimeUnit.MILLISECONDS.sleep(this.delay);
                }
                mc.addScheduledTask(() -> {
                    if (!Module.fullNullCheck()) {
                        CPacketUseEntity attack = new CPacketUseEntity();
                        attack.entityId = this.id;
                        attack.action = CPacketUseEntity.Action.ATTACK;
                        this.WurstplusGodModule.rotateTo(this.pos.up());
                        mc.player.connection.sendPacket(attack);
                        mc.player.connection.sendPacket(new CPacketAnimation(EnumHand.MAIN_HAND));
                    }
                });
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }
    }
}
